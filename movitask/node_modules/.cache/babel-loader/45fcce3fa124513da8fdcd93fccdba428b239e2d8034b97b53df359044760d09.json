{"ast":null,"code":"var _jsxFileName = \"F:\\\\iti\\\\react\\\\Day03\\\\task\\\\movitask\\\\src\\\\view\\\\MovieList.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport MovieController from '../controller/MovieController';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction MovieList() {\n  _s();\n  const [data, setdata] = useState({\n    movies: [],\n    loading: false,\n    error: null\n  });\n  const fetchMovies = async () => {\n    try {\n      const movies = await MovieController.fetchMovie();\n      setdata({\n        movies: movies,\n        loading: false\n      });\n    } catch (error) {\n      setdata({\n        error: error.message,\n        loading: false\n      });\n    }\n  };\n  console.log(data);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: data.loading ? 'Loading...' : false\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: data.error ? error.message : ''\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n}\n_s(MovieList, \"AwirIogaNag6lmBoOiyK1GVSujw=\");\n_c = MovieList;\nexport default MovieList;\nvar _c;\n$RefreshReg$(_c, \"MovieList\");","map":{"version":3,"names":["React","useState","MovieController","jsxDEV","_jsxDEV","Fragment","_Fragment","MovieList","_s","data","setdata","movies","loading","error","fetchMovies","fetchMovie","message","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["F:/iti/react/Day03/task/movitask/src/view/MovieList.jsx"],"sourcesContent":["\r\nimport React, { useState } from 'react'\r\nimport MovieController from '../controller/MovieController'\r\n\r\nfunction MovieList() {\r\n    \r\nconst [data, setdata] = useState({movies:[],loading:false,error:null})\r\n\r\nconst fetchMovies = async() => {\r\ntry{\r\n const movies =   await MovieController.fetchMovie()\r\n    setdata({movies:movies,loading:false})\r\n\r\n}\r\n    catch(error){\r\n        setdata({error:error.message,loading:false})\r\n    }\r\n }\r\nconsole.log(data);\r\n\r\n\r\n  return (\r\n    <>\r\n   <p>{data.loading?'Loading...':false}</p>\r\n    <p>{data.error?error.message:''}</p>\r\n    \r\n    </>\r\n  )\r\n}\r\n\r\nexport default MovieList"],"mappings":";;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,eAAe,MAAM,+BAA+B;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE3D,SAASC,SAASA,CAAA,EAAG;EAAAC,EAAA;EAErB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC;IAACU,MAAM,EAAC,EAAE;IAACC,OAAO,EAAC,KAAK;IAACC,KAAK,EAAC;EAAI,CAAC,CAAC;EAEtE,MAAMC,WAAW,GAAG,MAAAA,CAAA,KAAW;IAC/B,IAAG;MACF,MAAMH,MAAM,GAAK,MAAMT,eAAe,CAACa,UAAU,CAAC,CAAC;MAChDL,OAAO,CAAC;QAACC,MAAM,EAACA,MAAM;QAACC,OAAO,EAAC;MAAK,CAAC,CAAC;IAE1C,CAAC,CACG,OAAMC,KAAK,EAAC;MACRH,OAAO,CAAC;QAACG,KAAK,EAACA,KAAK,CAACG,OAAO;QAACJ,OAAO,EAAC;MAAK,CAAC,CAAC;IAChD;EACH,CAAC;EACFK,OAAO,CAACC,GAAG,CAACT,IAAI,CAAC;EAGf,oBACEL,OAAA,CAAAE,SAAA;IAAAa,QAAA,gBACDf,OAAA;MAAAe,QAAA,EAAIV,IAAI,CAACG,OAAO,GAAC,YAAY,GAAC;IAAK;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACvCnB,OAAA;MAAAe,QAAA,EAAIV,IAAI,CAACI,KAAK,GAACA,KAAK,CAACG,OAAO,GAAC;IAAE;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA,eAElC,CAAC;AAEP;AAACf,EAAA,CAxBQD,SAAS;AAAAiB,EAAA,GAATjB,SAAS;AA0BlB,eAAeA,SAAS;AAAA,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}